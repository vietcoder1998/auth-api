generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  nickname     String?
  roleId       String?
  role         Role?          @relation(fields: [roleId], references: [id])
  tokens       Token[]
  ssos         SSO[]
  loginHistory LoginHistory[]
  logicHistory LogicHistory[]
  status       String         @default("active")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("user")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  permissions Permission[]
  users       User[]

  @@map("role")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  category    String   @default("other")
  route       String?
  method      String?  // GET, POST, PUT, DELETE, PATCH
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("permission")
}

model Token {
  id           String   @id @default(uuid())
  userId       String
  accessToken  String   @unique @db.VarChar(500)
  refreshToken String   @unique @db.VarChar(500)
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@map("token")
}


model MailTemplate {
  id          String   @id @default(uuid())
  name        String   @unique
  subject     String
  body        String   @db.Text
  active      Boolean  @default(true)
  mails       Mail[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("mail_template")
}

model NotificationTemplate {
  id           String         @id @default(uuid())
  name         String         @unique
  title        String
  body         String         @db.Text
  active       Boolean        @default(true)
  logicHistory LogicHistory[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("notification_template")
}

model Config {
  id    String @id @default(uuid())
  key   String @unique
  value String

  @@map("config")
}

model Mail {
  id              String   @id @default(uuid())
  to              String
  from            String?
  subject         String
  body            String   @db.Text
  status          String   @default("pending") // pending, sent, failed
  templateId      String?
  template        MailTemplate? @relation(fields: [templateId], references: [id])
  sentAt          DateTime?
  failedReason    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("mail")
}

model SSO {
  id          String   @id @default(uuid())
  url         String
  key         String   @unique
  userId      String
  deviceIP    String?
  loginHistory LoginHistory[]
  user        User     @relation(fields: [userId], references: [id])
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sso")
}

model LoginHistory {
  id          String   @id @default(uuid())
  ssoId       String?
  userId      String
  deviceIP    String?
  userAgent   String?
  loginAt     DateTime @default(now())
  logoutAt    DateTime?
  status      String   @default("active") // active, logged_out, expired
  location    String?
  sso         SSO?     @relation(fields: [ssoId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("login_history")
}

model LogicHistory {
  id                        String                 @id @default(uuid())
  userId                    String
  action                    String                 // login, logout, password_change, profile_update, etc.
  entityType                String?                // user, role, permission, etc.
  entityId                  String?
  oldValues                 String?                @db.Text // JSON string of old values
  newValues                 String?                @db.Text // JSON string of new values
  ipAddress                 String?
  userAgent                 String?
  notificationTemplateId    String?
  notificationSent          Boolean                @default(false)
  user                      User                   @relation(fields: [userId], references: [id])
  notificationTemplate      NotificationTemplate?  @relation(fields: [notificationTemplateId], references: [id])
  createdAt                 DateTime               @default(now())

  @@map("logic_history")
}
