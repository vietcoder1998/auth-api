generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  nickname  String?
  roleId    String?
  role      Role?    @relation(fields: [roleId], references: [id])
  tokens    Token[]
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  permissions Permission[]
  users       User[]

  @@map("role")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  category    String   @default("other")
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("permission")
}

model Token {
  id           String   @id @default(uuid())
  userId       String
  accessToken  String   @unique @db.VarChar(500)
  refreshToken String   @unique @db.VarChar(500)
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@map("token")
}


model MailTemplate {
  id          String   @id @default(uuid())
  name        String   @unique
  subject     String
  body        String   @db.Text
  active      Boolean  @default(true)
  mails       Mail[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("mail_template")
}

model NotificationTemplate {
  id          String   @id @default(uuid())
  name        String   @unique
  title       String
  body        String   @db.Text
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("notification_template")
}

model Config {
  id    String @id @default(uuid())
  key   String @unique
  value String

  @@map("config")
}

model Mail {
  id              String   @id @default(uuid())
  to              String
  from            String?
  subject         String
  body            String   @db.Text
  status          String   @default("pending") // pending, sent, failed
  templateId      String?
  template        MailTemplate? @relation(fields: [templateId], references: [id])
  sentAt          DateTime?
  failedReason    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("mail")
}
